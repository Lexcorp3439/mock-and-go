// Code generated by scratch. You must modify it.

package complex

import (
	"context"
	"fmt"
	"heisenbug/complex/internal/pkg/model"
	"heisenbug/complex/internal/pkg/store"

	validation "github.com/go-ozzo/ozzo-validation/v4"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	desc "heisenbug/complex/pkg/api/complex"
)

// CreateOrUpdateTemplate stub. Please implement it.
func (i *Implementation) CreateOrUpdateTemplate(ctx context.Context, req *desc.TemplateRequest) (*desc.TemplateResponse, error) {
	err := validateTemplateRequest(req)
	if err != nil {
		return nil, status.Error(codes.InvalidArgument, err.Error())
	}

	template := &model.Template{
		Name:        req.TemplateName,
		Description: req.Description,
		Status:      req.Status,
	}

	_, err = i.templateRepo.GetTemplate(ctx, req.TemplateName)
	var dbErr error
	switch {
	case err == nil:
		dbErr = i.templateRepo.UpdateTemplate(ctx, template)
	case err.Error() == store.ErrNotFound.Error():
		dbErr = i.templateRepo.CreateTemplate(ctx, template)
	default:
		return nil, fmt.Errorf("GetTemplate error: %v", err.Error())
	}
	if dbErr != nil {
		return nil, fmt.Errorf("create or update template error: %v", dbErr.Error())
	}

	return &desc.TemplateResponse{
		Template: &desc.TemplateInfo{
			TemplateName: req.TemplateName,
			Description:  req.GetDescription(),
		},
	}, nil
}

func validateTemplateRequest(req *desc.TemplateRequest) error {
	err := validation.ValidateStruct(req,
		validation.Field(&req.TemplateName, validation.Required),
		validation.Field(&req.Status, validation.Min(0)),
	)
	return err
}

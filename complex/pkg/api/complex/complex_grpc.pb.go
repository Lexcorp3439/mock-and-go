// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: complex.proto

package complex

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ComplexClient is the client API for Complex service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComplexClient interface {
	CreateOrUpdateTemplate(ctx context.Context, in *TemplateRequest, opts ...grpc.CallOption) (*TemplateResponse, error)
	GetTemplateByName(ctx context.Context, in *GetTemplateByNameRequest, opts ...grpc.CallOption) (*TemplateResponse, error)
	GetTemplateList(ctx context.Context, in *GetTemplateListRequest, opts ...grpc.CallOption) (*GetTemplateListResponse, error)
	DeleteTemplate(ctx context.Context, in *DeleteTemplateRequest, opts ...grpc.CallOption) (*DeleteTemplateResponse, error)
	BindPhoneWithTemplate(ctx context.Context, in *BindPhoneWithTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type complexClient struct {
	cc grpc.ClientConnInterface
}

func NewComplexClient(cc grpc.ClientConnInterface) ComplexClient {
	return &complexClient{cc}
}

func (c *complexClient) CreateOrUpdateTemplate(ctx context.Context, in *TemplateRequest, opts ...grpc.CallOption) (*TemplateResponse, error) {
	out := new(TemplateResponse)
	err := c.cc.Invoke(ctx, "/complex.Complex/CreateOrUpdateTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complexClient) GetTemplateByName(ctx context.Context, in *GetTemplateByNameRequest, opts ...grpc.CallOption) (*TemplateResponse, error) {
	out := new(TemplateResponse)
	err := c.cc.Invoke(ctx, "/complex.Complex/GetTemplateByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complexClient) GetTemplateList(ctx context.Context, in *GetTemplateListRequest, opts ...grpc.CallOption) (*GetTemplateListResponse, error) {
	out := new(GetTemplateListResponse)
	err := c.cc.Invoke(ctx, "/complex.Complex/GetTemplateList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complexClient) DeleteTemplate(ctx context.Context, in *DeleteTemplateRequest, opts ...grpc.CallOption) (*DeleteTemplateResponse, error) {
	out := new(DeleteTemplateResponse)
	err := c.cc.Invoke(ctx, "/complex.Complex/DeleteTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complexClient) BindPhoneWithTemplate(ctx context.Context, in *BindPhoneWithTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/complex.Complex/BindPhoneWithTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComplexServer is the server API for Complex service.
// All implementations must embed UnimplementedComplexServer
// for forward compatibility
type ComplexServer interface {
	CreateOrUpdateTemplate(context.Context, *TemplateRequest) (*TemplateResponse, error)
	GetTemplateByName(context.Context, *GetTemplateByNameRequest) (*TemplateResponse, error)
	GetTemplateList(context.Context, *GetTemplateListRequest) (*GetTemplateListResponse, error)
	DeleteTemplate(context.Context, *DeleteTemplateRequest) (*DeleteTemplateResponse, error)
	BindPhoneWithTemplate(context.Context, *BindPhoneWithTemplateRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedComplexServer()
}

// UnimplementedComplexServer must be embedded to have forward compatible implementations.
type UnimplementedComplexServer struct {
}

func (UnimplementedComplexServer) CreateOrUpdateTemplate(context.Context, *TemplateRequest) (*TemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateTemplate not implemented")
}
func (UnimplementedComplexServer) GetTemplateByName(context.Context, *GetTemplateByNameRequest) (*TemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplateByName not implemented")
}
func (UnimplementedComplexServer) GetTemplateList(context.Context, *GetTemplateListRequest) (*GetTemplateListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplateList not implemented")
}
func (UnimplementedComplexServer) DeleteTemplate(context.Context, *DeleteTemplateRequest) (*DeleteTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplate not implemented")
}
func (UnimplementedComplexServer) BindPhoneWithTemplate(context.Context, *BindPhoneWithTemplateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindPhoneWithTemplate not implemented")
}
func (UnimplementedComplexServer) mustEmbedUnimplementedComplexServer() {}

// UnsafeComplexServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComplexServer will
// result in compilation errors.
type UnsafeComplexServer interface {
	mustEmbedUnimplementedComplexServer()
}

func RegisterComplexServer(s grpc.ServiceRegistrar, srv ComplexServer) {
	s.RegisterService(&Complex_ServiceDesc, srv)
}

func _Complex_CreateOrUpdateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplexServer).CreateOrUpdateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/complex.Complex/CreateOrUpdateTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplexServer).CreateOrUpdateTemplate(ctx, req.(*TemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Complex_GetTemplateByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplateByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplexServer).GetTemplateByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/complex.Complex/GetTemplateByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplexServer).GetTemplateByName(ctx, req.(*GetTemplateByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Complex_GetTemplateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplateListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplexServer).GetTemplateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/complex.Complex/GetTemplateList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplexServer).GetTemplateList(ctx, req.(*GetTemplateListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Complex_DeleteTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplexServer).DeleteTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/complex.Complex/DeleteTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplexServer).DeleteTemplate(ctx, req.(*DeleteTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Complex_BindPhoneWithTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindPhoneWithTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplexServer).BindPhoneWithTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/complex.Complex/BindPhoneWithTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplexServer).BindPhoneWithTemplate(ctx, req.(*BindPhoneWithTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Complex_ServiceDesc is the grpc.ServiceDesc for Complex service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Complex_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "complex.Complex",
	HandlerType: (*ComplexServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrUpdateTemplate",
			Handler:    _Complex_CreateOrUpdateTemplate_Handler,
		},
		{
			MethodName: "GetTemplateByName",
			Handler:    _Complex_GetTemplateByName_Handler,
		},
		{
			MethodName: "GetTemplateList",
			Handler:    _Complex_GetTemplateList_Handler,
		},
		{
			MethodName: "DeleteTemplate",
			Handler:    _Complex_DeleteTemplate_Handler,
		},
		{
			MethodName: "BindPhoneWithTemplate",
			Handler:    _Complex_BindPhoneWithTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "complex.proto",
}

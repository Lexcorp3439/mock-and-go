// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: identification.proto

package identification

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IdentificationClient is the client API for Identification service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdentificationClient interface {
	Upgrade(ctx context.Context, in *UpgradeRequest, opts ...grpc.CallOption) (*UpgradeResponse, error)
	UpgradeV2(ctx context.Context, in *UpgradeRequest, opts ...grpc.CallOption) (*UpgradeResponse, error)
	UpgradeV3(ctx context.Context, in *UpgradeRequest, opts ...grpc.CallOption) (*UpgradeResponse, error)
}

type identificationClient struct {
	cc grpc.ClientConnInterface
}

func NewIdentificationClient(cc grpc.ClientConnInterface) IdentificationClient {
	return &identificationClient{cc}
}

func (c *identificationClient) Upgrade(ctx context.Context, in *UpgradeRequest, opts ...grpc.CallOption) (*UpgradeResponse, error) {
	out := new(UpgradeResponse)
	err := c.cc.Invoke(ctx, "/identification.Identification/Upgrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identificationClient) UpgradeV2(ctx context.Context, in *UpgradeRequest, opts ...grpc.CallOption) (*UpgradeResponse, error) {
	out := new(UpgradeResponse)
	err := c.cc.Invoke(ctx, "/identification.Identification/UpgradeV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identificationClient) UpgradeV3(ctx context.Context, in *UpgradeRequest, opts ...grpc.CallOption) (*UpgradeResponse, error) {
	out := new(UpgradeResponse)
	err := c.cc.Invoke(ctx, "/identification.Identification/UpgradeV3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentificationServer is the server API for Identification service.
// All implementations must embed UnimplementedIdentificationServer
// for forward compatibility
type IdentificationServer interface {
	Upgrade(context.Context, *UpgradeRequest) (*UpgradeResponse, error)
	UpgradeV2(context.Context, *UpgradeRequest) (*UpgradeResponse, error)
	UpgradeV3(context.Context, *UpgradeRequest) (*UpgradeResponse, error)
	mustEmbedUnimplementedIdentificationServer()
}

// UnimplementedIdentificationServer must be embedded to have forward compatible implementations.
type UnimplementedIdentificationServer struct {
}

func (UnimplementedIdentificationServer) Upgrade(context.Context, *UpgradeRequest) (*UpgradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upgrade not implemented")
}
func (UnimplementedIdentificationServer) UpgradeV2(context.Context, *UpgradeRequest) (*UpgradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeV2 not implemented")
}
func (UnimplementedIdentificationServer) UpgradeV3(context.Context, *UpgradeRequest) (*UpgradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeV3 not implemented")
}
func (UnimplementedIdentificationServer) mustEmbedUnimplementedIdentificationServer() {}

// UnsafeIdentificationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdentificationServer will
// result in compilation errors.
type UnsafeIdentificationServer interface {
	mustEmbedUnimplementedIdentificationServer()
}

func RegisterIdentificationServer(s grpc.ServiceRegistrar, srv IdentificationServer) {
	s.RegisterService(&Identification_ServiceDesc, srv)
}

func _Identification_Upgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentificationServer).Upgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/identification.Identification/Upgrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentificationServer).Upgrade(ctx, req.(*UpgradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Identification_UpgradeV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentificationServer).UpgradeV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/identification.Identification/UpgradeV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentificationServer).UpgradeV2(ctx, req.(*UpgradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Identification_UpgradeV3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentificationServer).UpgradeV3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/identification.Identification/UpgradeV3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentificationServer).UpgradeV3(ctx, req.(*UpgradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Identification_ServiceDesc is the grpc.ServiceDesc for Identification service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Identification_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "identification.Identification",
	HandlerType: (*IdentificationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upgrade",
			Handler:    _Identification_Upgrade_Handler,
		},
		{
			MethodName: "UpgradeV2",
			Handler:    _Identification_UpgradeV2_Handler,
		},
		{
			MethodName: "UpgradeV3",
			Handler:    _Identification_UpgradeV3_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "identification.proto",
}
